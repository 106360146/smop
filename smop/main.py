# SMOP -- Simple Matlab/Octave to Python compiler
# Copyright 2011-2016 Victor Leikehman

#import version
import sys,cPickle,glob,os
import getopt,re
import lexer,parse,resolve,backend,options,node,graphviz
import callgraph
import networkx as nx
import pickle
import readline
import graphviz

def main():
    #args = options.parser.parse_args()
    #for key in dir(args):
    #    if not key.startswith("_"):
    #        setattr(options,key,getattr(args,key))
    if not options.filelist:
        options.parser.print_help()
        return
    #assert options.filelist
    #xfiles = options.exclude.split(",") if options.exclude else []
    if not options.output:
        options.output = "a.py"
    fp = open(options.output,"w") if options.output != "-" else sys.stdout

    print >> fp, "# Autogenerated with SMOP "# + options.version
    # for key in dir(options.args):
    #     if not key.startswith("_"):
    #         value = getattr(options,key)
    #         print >> fp, '# %s=%s' % (key,value)
    print >> fp, "from __future__ import division"
    print >> fp, "from core import *"

    #if options.callgraph:
    #    C = nx.DiGraph()
    for options.filename in options.filelist:
        try:
            #for options.filename in glob.glob(os.path.expanduser(pattern)):
            print >> fp, "#", options.filename
            if not options.filename.endswith((".m",".tst")):
                print "\tIgnored file: '%s'" % options.filename
                continue
            if os.path.basename(options.filename) in options.xfiles:
                print "\tExcluded file: '%s'" % options.filename
                continue
            if options.verbose:
                print options.filename
            buf = open(options.filename).read().replace("\r\n","\n")
            stmt_list=parse.parse(buf if buf[-1]=='\n' else buf+'\n')
            #assert None not in stmt_list                  
            if not stmt_list and options.strict:
                return
            if options.enumerate:
                for i,stmt_obj in enumerate(stmt_list): 
                    #stmt_class = stmt_obj.__class__.__name__
                    print i, stmt_obj
            #     if i == options.debug_index:
            #         import pdb ; pdb.set_trace()
            #     if stmt_class == "func_stmt":
            #         func_name = stmt_obj.ident.name 
            #         if options.verbose:
            #             print "\t",func_name
            #     else:
            #         func_name = ""
            if not options.no_resolve:
                G = resolve.resolve(stmt_list)
            if not options.no_backend:
                s = backend.backend(stmt_list)
                print >> fp, s
        except Exception as e:
            print e
            if options.strict:
                raise
    # if options.callgraph:
    #     pickle.dump(C, open("callgraph.pickle","w"))
        #nx.write_dot(C,"callgraph.dot")

if __name__ == "__main__":
    main()
